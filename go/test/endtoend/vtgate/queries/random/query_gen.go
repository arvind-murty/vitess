/*
Copyright 2023 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package random

import (
	"fmt"
	"math/rand"

	"golang.org/x/exp/slices"

	"vitess.io/vitess/go/slices2"

	"vitess.io/vitess/go/vt/log"
	"vitess.io/vitess/go/vt/sqlparser"
)

// this file contains the structs and functions to generate random queries

// if true then known failing query types are still generated by randomQuery()
const testFailingQueries = false

type (
	queryGen struct {
		r         *rand.Rand
		genConfig sqlparser.ExprGeneratorConfig
	}
	column struct {
		name string
		// TODO: perhaps remove tableName and always pass columns through a tableT
		tableName string
		typ       string
	}
	tableT struct {
		// the tableT struct can be used to represent the schema of a table or a derived table
		// in the former case tableExpr will be a sqlparser.TableName, in the latter a sqlparser.DerivedTable
		// in order to create a query with a derived table, its AST form is retrieved from tableExpr
		// once the derived table is aliased, alias is updated
		tableExpr sqlparser.SimpleTableExpr
		alias     string
		cols      []column
	}
)

var _ sqlparser.ExprGenerator = (*tableT)(nil)
var _ sqlparser.ExprGenerator = (*column)(nil)

func newQueryGenerator(r *rand.Rand, genConfig sqlparser.ExprGeneratorConfig) queryGen {
	return queryGen{
		r:         r,
		genConfig: genConfig,
	}
}

// getColumnName returns tableName.name (if tableName is nonempty), otherwise name
func (c *column) getColumnName() string {
	var columnName string
	if c.tableName != "" {
		columnName += c.tableName + "."
	}

	return columnName + c.name
}

// getASTExpr returns the AST representation of a column
func (c *column) getASTExpr() sqlparser.Expr {
	return sqlparser.NewColNameWithQualifier(c.name, sqlparser.NewTableName(c.tableName))
}

// getName returns the alias if it is nonempty
// if the alias is nonempty and tableExpr is of type sqlparser.TableName,
// then getName returns Name from tableExpr
// otherwise getName returns an empty string
func (t *tableT) getName() string {
	if t.alias != "" {
		return t.alias
	} else if tName, ok := t.tableExpr.(sqlparser.TableName); ok {
		return sqlparser.String(tName.Name)
	}

	return ""
}

// setAlias sets the alias for t, as well as setting the tableName for all columns in cols
func (t *tableT) setAlias(newName string) {
	t.alias = newName
	for i := range t.cols {
		t.cols[i].tableName = newName
	}
}

// addColumns adds columns to t, and automatically assigns each column.tableName
// this makes it unnatural to modify tableName
func (t *tableT) addColumns(col ...column) {
	for i := range col {
		col[i].tableName = t.getName()
		t.cols = append(t.cols, col[i])
	}
}

func (c *column) Generate(_ *rand.Rand, genConfig sqlparser.ExprGeneratorConfig) sqlparser.Expr {
	if c.typ == genConfig.Type {
		return c.getASTExpr()
	}

	return nil
}

func (t *tableT) Generate(r *rand.Rand, genConfig sqlparser.ExprGeneratorConfig) sqlparser.Expr {
	colsCopy := slices.Clone(t.cols)

	for len(colsCopy) > 0 {
		idx := r.Intn(len(colsCopy))
		randCol := colsCopy[idx]
		if randCol.typ == genConfig.Type {
			return randCol.getASTExpr()
		}

		// delete randCol from colsCopy
		colsCopy[idx] = colsCopy[len(colsCopy)-1]
		colsCopy = colsCopy[:len(colsCopy)-1]
	}

	return nil
}

func (qg queryGen) randomQuery(schemaTables []tableT) *sqlparser.Select {
	// make sure the random expressions can generally not contain aggregates; change appropriately
	qg.genConfig = qg.genConfig.CannotAggregateConfig()

	sel := &sqlparser.Select{}
	sel.SetComments(sqlparser.Comments{"/*vt+ PLANNER=Gen4 */"})

	// select distinct (fails with group by bigint)
	isDistinct := qg.r.Intn(2) < 1
	if isDistinct {
		sel.MakeDistinct()
	}

	// create both tables and join at the same time since both occupy the from clause
	tables, isJoin := qg.createTablesAndJoin(schemaTables, sel)

	// canAggregate determines if the query will have
	// aggregate columns, group by, and having
	canAggregate := qg.r.Intn(4) > 0

	var (
		groupBy          sqlparser.GroupBy
		groupSelectExprs sqlparser.SelectExprs
		grouping         []column
		aggrSelectExprs  sqlparser.SelectExprs
		aggregates       []column
	)
	// TODO: distinct makes vitess think there is grouping on aggregation columns
	if canAggregate {
		if testFailingQueries || !isDistinct {
			// group by
			groupBy, groupSelectExprs, grouping = qg.createGroupBy(tables)
			sel.AddSelectExprs(groupSelectExprs)
			sel.GroupBy = groupBy
		}

		// aggregate columns
		aggrSelectExprs, aggregates = qg.createAggregations(tables)
		sel.AddSelectExprs(aggrSelectExprs)
		// sel.GroupBy = append(sel.GroupBy, aggrExprs...)

		// having
		isHaving := qg.r.Intn(2) < 1
		if isHaving {
			sel.AddHaving(sqlparser.AndExpressions(qg.createHavingPredicates(grouping)...))
		}
	}

	// can add both aggregate and grouping columns to order by
	// TODO: order fails with distinct and outer joins
	isOrdered := qg.r.Intn(2) < 1 && (!isDistinct || testFailingQueries) && (!isJoin || testFailingQueries)
	if isOrdered {
		sel.OrderBy = qg.createOrderBy(groupBy, aggrSelectExprs)
	}

	// where
	sel.AddWhere(sqlparser.AndExpressions(qg.createWherePredicates(tables)...))

	// only add a limit if the grouping columns are ordered
	// TODO: limit fails a lot
	isLimit := qg.r.Intn(2) < 1 && (isOrdered || len(groupBy) == 0) && testFailingQueries
	if isLimit {
		sel.Limit = qg.createLimit()
	}

	var (
		newTable tableT
		f        func() sqlparser.Expr
		typ      string
	)
	// add random expression to select
	// TODO: random expressions cause a lot of failures
	isRandomExpr := qg.r.Intn(2) < 1 && testFailingQueries

	// TODO: selecting a random expression potentially with columns creates
	// TODO: only_full_group_by related errors in Vitess
	if testFailingQueries {
		// TODO: ugly
		f = func() sqlparser.Expr {
			return qg.getRandomExpr(slices2.Map(tables, func(t tableT) sqlparser.ExprGenerator { return &t })...)
		}
	} else {
		f = func() sqlparser.Expr { return qg.getRandomExpr() }
	}

	// make sure we have at least one select expression
	for isRandomExpr || len(sel.SelectExprs) == 0 {
		// TODO: if the random expression is an int literal,
		// TODO: and if the query is (potentially) an aggregate query,
		// TODO: then we must group by the random expression,
		// TODO: but we cannot do this for int literals,
		// TODO: so we loop until we get a non-int-literal random expression
		// TODO: this is necessary because grouping by the alias (crandom0) currently fails on vitess
		randomExpr := f()
		literal, ok := randomExpr.(*sqlparser.Literal)
		isIntLiteral := ok && literal.Type == sqlparser.IntVal
		if isIntLiteral && canAggregate {
			continue
		}

		// TODO: select distinct [literal] fails
		sel.Distinct = false

		sel.SelectExprs = append(sel.SelectExprs, sqlparser.NewAliasedExpr(randomExpr, "crandom0"))
		newTable.addColumns(column{
			name: "crandom0",
			typ:  typ,
		})

		// make sure to add the random expression to group by and order by for only_full_group_by
		if canAggregate {
			sel.AddGroupBy(randomExpr)
			if isOrdered || isLimit {
				sel.AddOrder(sqlparser.NewOrder(randomExpr, qg.getRandomOrderDirection()))
			}
		}

		break
	}

	// alias the grouping columns
	for i, col := range grouping {
		alias := fmt.Sprintf("cgroup%d", i)
		col.name = alias
	}

	// add them to newTable
	newTable.addColumns(grouping...)
	newTable.addColumns(aggregates...)

	// add new table to schemaTables
	newTable.tableExpr = sqlparser.NewDerivedTable(false, sel)
	schemaTables = append(schemaTables, newTable)

	// derived tables (partially unsupported)
	// TODO: derived tables fails a lot
	if qg.r.Intn(10) < 1 && testFailingQueries {
		sel = qg.randomQuery(schemaTables)
	}

	return sel
}

func (qg queryGen) createTablesAndJoin(schemaTables []tableT, sel *sqlparser.Select) ([]tableT, bool) {
	var tables []tableT
	// add at least one of original emp/dept tables for now because derived tables have nil columns
	tables = append(tables, schemaTables[qg.r.Intn(2)])

	tables[0].setAlias("tbl0")
	sel.From = append(sel.From, newAliasedTable(tables[0], "tbl0"))

	numTables := qg.r.Intn(len(schemaTables))
	for i := 0; i < numTables; i++ {
		tables = append(tables, randomEl(qg.r, schemaTables))
		alias := fmt.Sprintf("tbl%d", i+1)
		sel.From = append(sel.From, newAliasedTable(tables[i+1], alias))
		tables[i+1].setAlias(alias)
	}

	// TODO: outer joins produce mismatched results
	isJoin := qg.r.Intn(2) < 1 && testFailingQueries
	if isJoin {
		// TODO: do nested joins
		newTable := randomEl(qg.r, schemaTables)
		alias := fmt.Sprintf("tbl%d", numTables)
		newTable.setAlias(alias)
		tables = append(tables, newTable)

		qg.createJoin(tables, sel)
	}

	return tables, isJoin
}

// creates a left join (without the condition) between the last table in sel and newTable
// tables should have one more table than sel
func (qg queryGen) createJoin(tables []tableT, sel *sqlparser.Select) {
	n := len(sel.From)
	if len(tables) != n+1 {
		log.Fatalf("sel has %d tables and tables has %d tables", len(sel.From), n)
	}

	joinPredicate := sqlparser.AndExpressions(qg.createJoinPredicates(tables)...)
	joinCondition := sqlparser.NewJoinCondition(joinPredicate, nil)
	newTable := newAliasedTable(tables[n], fmt.Sprintf("tbl%d", n))
	sel.From[n-1] = sqlparser.NewJoinTableExpr(sel.From[n-1], sqlparser.LeftJoinType, newTable, joinCondition)
}

// returns 1-3 random expressions based on the last two elements of tables
// tables should have at least two elements
func (qg queryGen) createJoinPredicates(tables []tableT) sqlparser.Exprs {
	if len(tables) < 2 {
		log.Fatalf("tables has %d elements, needs at least 2", len(tables))
	}

	return qg.createRandomExprs(1, &tables[len(tables)-2], &tables[len(tables)-1])
}

// returns the grouping columns as three types: sqlparser.GroupBy, sqlparser.SelectExprs, []column
func (qg queryGen) createGroupBy(tables []tableT) (groupBy sqlparser.GroupBy, groupSelectExprs sqlparser.SelectExprs, grouping []column) {
	numGBs := qg.r.Intn(3)
	for i := 0; i < numGBs; i++ {
		tblIdx := qg.r.Intn(len(tables))
		col := randomEl(qg.r, tables[tblIdx].cols)
		// TODO: grouping by a date column sometimes errors
		if col.typ == "date" && !testFailingQueries {
			continue
		}
		groupBy = append(groupBy, col.getASTExpr())

		// add to select
		if qg.r.Intn(2) < 1 {
			alias := fmt.Sprintf("cgroup%d", len(grouping))
			groupSelectExprs = append(groupSelectExprs, newAliasedColumn(col, alias))
			// TODO: alias in a separate function to properly generate the having clause
			//col.name = sqlparser.NewColName(alias)
			grouping = append(grouping, col)
		}
	}

	return
}

// returns the aggregation columns as three types: sqlparser.SelectExprs, []column
func (qg queryGen) createAggregations(tables []tableT) (aggrSelectExprs sqlparser.SelectExprs, aggregates []column) {
	aggrExprs := qg.createRandomExprs(0,
		slices2.Map(tables, func(t tableT) sqlparser.ExprGenerator {
			return &t
		})...)
	for i := range aggrExprs {
		expr := sqlparser.RandomAggregate(qg.r, aggrExprs[i])
		alias := fmt.Sprintf("caggr%d", i)
		aggrSelectExprs = append(aggrSelectExprs, sqlparser.NewAliasedExpr(expr, alias))
		aggregates = append(aggregates, column{name: alias})
	}

	return
}

// orders on all non-aggregate SelectExprs and independently at random on all aggregate SelectExprs of sel
func (qg queryGen) createOrderBy(groupBy sqlparser.GroupBy, aggrExprs sqlparser.SelectExprs) (orderBy sqlparser.OrderBy) {
	// always order on grouping columns
	for i := range groupBy {
		orderBy = append(orderBy, sqlparser.NewOrder(groupBy[i], qg.getRandomOrderDirection()))
	}

	// randomly order on aggregation columns
	for i := range aggrExprs {
		if aliasedExpr, ok := aggrExprs[i].(*sqlparser.AliasedExpr); ok && qg.r.Intn(2) < 1 {
			orderBy = append(orderBy, sqlparser.NewOrder(aliasedExpr.Expr, qg.getRandomOrderDirection()))
		}
	}

	return
}

// returns 0-2 random expressions based on tables
func (qg queryGen) createWherePredicates(tables []tableT) sqlparser.Exprs {
	// TODO: create gen config outside
	return qg.createRandomExprs(0,
		slices2.Map(tables, func(t tableT) sqlparser.ExprGenerator { return &t })...)
}

// creates predicates for the having clause comparing a column to a random expression
func (qg queryGen) createHavingPredicates(grouping []column) sqlparser.Exprs {
	predicates := sqlparser.Exprs{}
	if qg.r.Intn(2) < 1 && testFailingQueries {
		// TODO: having can only contain aggregate or grouping columns in mysql, works fine in vitess
		// TODO: Can fix this by putting only the table with the grouping and aggregates column (newTable)
		predicates = append(predicates, qg.createRandomExprs(0,
			slices2.Map(grouping, func(c column) sqlparser.ExprGenerator { return &c })...)...)
	}

	qg.genConfig = qg.genConfig.CanAggregateConfig()
	predicates = append(predicates, qg.createRandomExprs(0,
		slices2.Map(grouping, func(c column) sqlparser.ExprGenerator { return &c })...)...)

	return predicates
}

// returns between minExprs and minExprs + 2 random expressions using generators
func (qg queryGen) createRandomExprs(minExprs int, generators ...sqlparser.ExprGenerator) (predicates sqlparser.Exprs) {
	numPredicates := qg.r.Intn(3) + minExprs
	for i := 0; i < numPredicates; i++ {
		predicates = append(predicates, qg.getRandomExpr(generators...))
	}

	return
}

// getRandomExpr returns a random expression
func (qg queryGen) getRandomExpr(generators ...sqlparser.ExprGenerator) sqlparser.Expr {
	g := sqlparser.NewGenerator(qg.r, 2, generators...)
	return g.Expression(qg.genConfig)
}

// creates sel.Limit
func (qg queryGen) createLimit() *sqlparser.Limit {
	limitNum := qg.r.Intn(10)
	if qg.r.Intn(2) < 1 {
		offset := qg.r.Intn(10)
		return sqlparser.NewLimit(offset, limitNum)
	}

	return sqlparser.NewLimitWithoutOffset(limitNum)
}

func (qg queryGen) getRandomOrderDirection() sqlparser.OrderDirection {
	// asc, desc
	return randomEl(qg.r, []sqlparser.OrderDirection{0, 1})
}

func randomEl[K any](r *rand.Rand, in []K) K {
	return in[r.Intn(len(in))]
}

func newAliasedTable(tbl tableT, alias string) *sqlparser.AliasedTableExpr {
	return sqlparser.NewAliasedTableExpr(tbl.tableExpr, alias)
}

func newAliasedColumn(col column, alias string) *sqlparser.AliasedExpr {
	return sqlparser.NewAliasedExpr(col.getASTExpr(), alias)
}
