/*
Copyright 2023 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package random

import (
	"fmt"
	"math/rand"

	"golang.org/x/exp/slices"

	"vitess.io/vitess/go/slices2"

	"vitess.io/vitess/go/vt/log"
	"vitess.io/vitess/go/vt/sqlparser"
)

// this file contains the structs and functions to generate random queries

// if true then known failing query types are still generated by randomQuery()
const testFailingQueries = false

type (
	queryGen struct {
		r         *rand.Rand
		genConfig sqlparser.ExprGeneratorConfig
		maxTables int
		maxAggrs  int
		maxGBs    int
		// maxCols = 0 indicates no limit
		maxCols int
		// maxRows = 0 indicates no limit
		maxRows      int
		schemaTables []tableT
		sel          *sqlparser.Select
	}
	column struct {
		name string
		// TODO: perhaps remove tableName and always pass columns through a tableT
		tableName string
		typ       string
	}
	tableT struct {
		// the tableT struct can be used to represent the schema of a table or a derived table
		// in the former case tableExpr will be a sqlparser.TableName, in the latter a sqlparser.DerivedTable
		// in order to create a query with a derived table, its AST form is retrieved from tableExpr
		// once the derived table is aliased, alias is updated
		tableExpr sqlparser.SimpleTableExpr
		alias     string
		cols      []column
	}
)

var _ sqlparser.ExprGenerator = (*tableT)(nil)
var _ sqlparser.ExprGenerator = (*column)(nil)
var _ sqlparser.ExprGenerator = (*queryGen)(nil)

func newQueryGenerator(r *rand.Rand, genConfig sqlparser.ExprGeneratorConfig, maxTables, maxAggrs, maxGBs int, schemaTables []tableT) *queryGen {
	if maxTables <= 0 {
		log.Fatalf("maxTables must be at least 1, currently %d\n", maxTables)
	}

	return &queryGen{
		r:            r,
		genConfig:    genConfig,
		maxTables:    maxTables,
		maxAggrs:     maxAggrs,
		maxGBs:       maxGBs,
		maxCols:      1,
		maxRows:      1,
		schemaTables: schemaTables,
	}
}

// getColumnName returns tableName.name (if tableName is nonempty), otherwise name
func (c *column) getColumnName() string {
	var columnName string
	if c.tableName != "" {
		columnName += c.tableName + "."
	}

	return columnName + c.name
}

// getASTExpr returns the AST representation of a column
func (c *column) getASTExpr() sqlparser.Expr {
	return sqlparser.NewColNameWithQualifier(c.name, sqlparser.NewTableName(c.tableName))
}

// getName returns the alias if it is nonempty
// if the alias is nonempty and tableExpr is of type sqlparser.TableName,
// then getName returns Name from tableExpr
// otherwise getName returns an empty string
func (t *tableT) getName() string {
	if t.alias != "" {
		return t.alias
	} else if tName, ok := t.tableExpr.(sqlparser.TableName); ok {
		return sqlparser.String(tName.Name)
	}

	return ""
}

// setAlias sets the alias for t, as well as setting the tableName for all columns in cols
func (t *tableT) setAlias(newName string) {
	t.alias = newName
	for i := range t.cols {
		t.cols[i].tableName = newName
	}
}

// addColumns adds columns to t, and automatically assigns each column.tableName
// this makes it unnatural to modify tableName
func (t *tableT) addColumns(col ...column) {
	for i := range col {
		col[i].tableName = t.getName()
		t.cols = append(t.cols, col[i])
	}
}

func (t *tableT) clone() *tableT {
	return &tableT{
		tableExpr: sqlparser.CloneSimpleTableExpr(t.tableExpr),
		alias:     t.alias,
		cols:      slices.Clone(t.cols),
	}
}

func (c *column) Generate(_ *rand.Rand, genConfig sqlparser.ExprGeneratorConfig) sqlparser.Expr {
	if c.typ == genConfig.Type {
		return c.getASTExpr()
	}

	return nil
}

func (t *tableT) Generate(r *rand.Rand, genConfig sqlparser.ExprGeneratorConfig) sqlparser.Expr {
	colsCopy := slices.Clone(t.cols)

	for len(colsCopy) > 0 {
		idx := r.Intn(len(colsCopy))
		randCol := colsCopy[idx]
		if randCol.typ == genConfig.Type {
			return randCol.getASTExpr()
		}

		// delete randCol from colsCopy
		colsCopy[idx] = colsCopy[len(colsCopy)-1]
		colsCopy = colsCopy[:len(colsCopy)-1]
	}

	return nil
}

// Generate generates a scalar subquery based on qg
func (qg *queryGen) Generate(r *rand.Rand, genConfig sqlparser.ExprGeneratorConfig) sqlparser.Expr {
	var newSchemaTables []tableT
	for _, tbl := range qg.schemaTables {
		newSchemaTables = append(newSchemaTables, *tbl.clone())
	}

	newQG := newQueryGenerator(r, genConfig, qg.maxTables, qg.maxAggrs, qg.maxGBs, newSchemaTables)
	newQG.maxRows = 1
	newQG.maxCols = 1
	newQG.randomQuery()

	return &sqlparser.Subquery{Select: newQG.sel}
}

func (qg *queryGen) randomQuery() {
	// make sure the random expressions can generally not contain aggregates; change appropriately
	qg.genConfig = qg.genConfig.CannotAggregateConfig()

	qg.sel = &sqlparser.Select{}
	qg.sel.SetComments(sqlparser.Comments{"/*vt+ PLANNER=Gen4 */"})

	// select distinct (fails with group by bigint)
	isDistinct := qg.r.Intn(2) < 1
	if isDistinct {
		qg.sel.MakeDistinct()
	}

	// create both tables and join at the same time since both occupy the from clause
	tables, isJoin := qg.createTablesAndJoin()

	// canAggregate determines if the query will have
	// aggregate columns, group by, and having
	canAggregate := qg.r.Intn(4) > 0

	var (
		grouping, aggregates []column
	)
	// TODO: distinct makes vitess think there is grouping on aggregation columns
	if canAggregate {
		if testFailingQueries || !isDistinct {
			// group by
			if qg.maxRows == 0 {
				grouping = qg.createGroupBy(tables)
			}
		}

		// aggregate columns
		aggregates = qg.createAggregations(tables)

		// having
		isHaving := qg.r.Intn(2) < 1
		if isHaving {
			qg.createHavingPredicates(grouping)
		}
	}

	// can add both aggregate and grouping columns to order by
	// TODO: order fails with distinct and outer joins
	isOrdered := qg.r.Intn(2) < 1 && (!isDistinct || testFailingQueries) && (!isJoin || testFailingQueries)
	if isOrdered {
		qg.createOrderBy()
	}

	// where
	qg.createWherePredicates(tables)

	var (
		newTable tableT
		f        func() sqlparser.Expr
		typ      string
	)
	// add random expression to select
	// TODO: random expressions cause a lot of failures
	isRandomExpr := qg.r.Intn(2) < 1 && testFailingQueries

	// TODO: selecting a random expression potentially with columns creates
	// TODO: only_full_group_by related errors in Vitess
	if testFailingQueries {
		// TODO: ugly
		f = func() sqlparser.Expr {
			return qg.getRandomExpr(slices2.Map(tables, func(t tableT) sqlparser.ExprGenerator { return &t })...)
		}
	} else {
		f = func() sqlparser.Expr { return qg.getRandomExpr() }
	}

	// make sure we have at least one select expression
	for isRandomExpr || len(qg.sel.SelectExprs) == 0 {
		// TODO: if the random expression is an int literal,
		// TODO: and if the query is (potentially) an aggregate query,
		// TODO: then we must group by the random expression,
		// TODO: but we cannot do this for int literals,
		// TODO: so we loop until we get a non-int-literal random expression
		// TODO: this is necessary because grouping by the alias (crandom0) currently fails on vitess
		randomExpr := f()
		literal, ok := randomExpr.(*sqlparser.Literal)
		isIntLiteral := ok && literal.Type == sqlparser.IntVal
		if isIntLiteral && canAggregate {
			continue
		}

		// TODO: select distinct [literal] fails
		qg.sel.Distinct = false

		qg.sel.SelectExprs = append(qg.sel.SelectExprs, sqlparser.NewAliasedExpr(randomExpr, "crandom0"))
		newTable.addColumns(column{
			name: "crandom0",
			typ:  typ,
		})

		// make sure to add the random expression to group by and order by for only_full_group_by
		if canAggregate {
			qg.sel.AddGroupBy(randomExpr)
			if isOrdered {
				qg.sel.AddOrder(sqlparser.NewOrder(randomExpr, getRandomOrderDirection(qg.r)))
			}
		}

		break
	}

	if qg.maxCols > 0 {
		// remove SelectExprs randomly until there are qg.maxCols amount
		for len(qg.sel.SelectExprs) > qg.maxCols {
			// select a random index and remove it from SelectExprs
			idx := qg.r.Intn(len(qg.sel.SelectExprs))
			qg.sel.SelectExprs[idx] = qg.sel.SelectExprs[len(qg.sel.SelectExprs)-1]
			qg.sel.SelectExprs = qg.sel.SelectExprs[:len(qg.sel.SelectExprs)-1]
		}
	}

	// only add a limit if there is an ordering
	// TODO: limit fails a lot
	isLimit := qg.r.Intn(2) < 1 && len(qg.sel.OrderBy) > 0 && testFailingQueries
	if isLimit {
		qg.createLimit()
	}

	// alias the grouping columns randomly
	for i := range grouping {
		if qg.r.Intn(2) < 1 {
			continue
		}
		alias := fmt.Sprintf("cgroup%d", i)
		grouping[i].name = alias
	}

	// add them to newTable
	newTable.addColumns(grouping...)
	newTable.addColumns(aggregates...)

	// add new table to schemaTables
	newTable.tableExpr = sqlparser.NewDerivedTable(false, qg.sel)
	qg.schemaTables = append(qg.schemaTables, newTable)

	// derived tables (partially unsupported)
	// TODO: derived tables fails a lot
	if qg.r.Intn(10) < 1 && testFailingQueries {
		qg.randomQuery()
	}
}

func (qg *queryGen) createTablesAndJoin() ([]tableT, bool) {
	var tables []tableT
	// add at least one of original emp/dept tables for now because derived tables have nil columns
	tables = append(tables, qg.schemaTables[qg.r.Intn(2)])

	tables[0].setAlias("tbl0")
	qg.sel.From = append(qg.sel.From, newAliasedTable(tables[0], "tbl0"))

	numTables := qg.r.Intn(qg.maxTables)
	for i := 0; i < numTables; i++ {
		tables = append(tables, randomEl(qg.r, qg.schemaTables))
		alias := fmt.Sprintf("tbl%d", i+1)
		qg.sel.From = append(qg.sel.From, newAliasedTable(tables[i+1], alias))
		tables[i+1].setAlias(alias)
	}

	// TODO: outer joins produce mismatched results
	isJoin := qg.r.Intn(2) < 1 && testFailingQueries
	if isJoin {
		// TODO: do nested joins
		newTable := randomEl(qg.r, qg.schemaTables)
		alias := fmt.Sprintf("tbl%d", numTables+1)
		newTable.setAlias(alias)
		tables = append(tables, newTable)

		qg.createJoin(tables)
	}

	return tables, isJoin
}

// creates a left join (without the condition) between the last table in sel and newTable
// tables should have one more table than sel
func (qg *queryGen) createJoin(tables []tableT) {
	n := len(qg.sel.From)
	if len(tables) != n+1 {
		log.Fatalf("sel has %d tables and tables has %d tables", len(qg.sel.From), n)
	}

	joinPredicate := sqlparser.AndExpressions(qg.createJoinPredicates(tables)...)
	joinCondition := sqlparser.NewJoinCondition(joinPredicate, nil)
	newTable := newAliasedTable(tables[n], fmt.Sprintf("tbl%d", n))
	qg.sel.From[n-1] = sqlparser.NewJoinTableExpr(qg.sel.From[n-1], getRandomJoinType(qg.r), newTable, joinCondition)
}

// returns 1-3 random expressions based on the last two elements of tables
// tables should have at least two elements
func (qg *queryGen) createJoinPredicates(tables []tableT) sqlparser.Exprs {
	if len(tables) < 2 {
		log.Fatalf("tables has %d elements, needs at least 2", len(tables))
	}

	return qg.createRandomExprs(1, 3, &tables[len(tables)-2], &tables[len(tables)-1])
}

// returns the grouping columns as three types: sqlparser.GroupBy, sqlparser.SelectExprs, []column
func (qg *queryGen) createGroupBy(tables []tableT) (grouping []column) {
	if qg.maxGBs <= 0 {
		return
	}
	numGBs := qg.r.Intn(qg.maxGBs + 1)
	for i := 0; i < numGBs; i++ {
		tblIdx := qg.r.Intn(len(tables))
		col := randomEl(qg.r, tables[tblIdx].cols)
		// TODO: grouping by a date column sometimes errors
		if col.typ == "date" && !testFailingQueries {
			continue
		}
		qg.sel.GroupBy = append(qg.sel.GroupBy, col.getASTExpr())

		// add to select
		if qg.r.Intn(2) < 1 {
			alias := fmt.Sprintf("cgroup%d", len(grouping))
			qg.sel.SelectExprs = append(qg.sel.SelectExprs, newAliasedColumn(col, alias))
			// TODO: alias in a separate function to properly generate the having clause
			//col.name = sqlparser.NewColName(alias)
			grouping = append(grouping, col)
		}
	}

	return
}

// returns the aggregation columns as three types: sqlparser.SelectExprs, []column
func (qg *queryGen) createAggregations(tables []tableT) (aggregates []column) {
	qg.genConfig = qg.genConfig.IsAggregateConfig()
	aggrExprs := qg.createRandomExprs(0, qg.maxAggrs,
		slices2.Map(tables, func(t tableT) sqlparser.ExprGenerator {
			return &t
		})...)
	qg.genConfig = qg.genConfig.CannotAggregateConfig()

	for i, expr := range aggrExprs {
		// TODO: min/max often fails
		// randomly alias
		var alias string
		if qg.r.Intn(2) < 1 {
			alias = fmt.Sprintf("caggr%d", i)
			aggregates = append(aggregates, column{name: alias})
		} else {
			aggregates = append(aggregates, column{name: sqlparser.String(expr)})
		}
		qg.sel.SelectExprs = append(qg.sel.SelectExprs, sqlparser.NewAliasedExpr(expr, alias))
	}

	return
}

// orders on all grouping expressions and on random SelectExprs
func (qg *queryGen) createOrderBy() {
	// always order on grouping expressions
	for _, expr := range qg.sel.GroupBy {
		qg.sel.OrderBy = append(qg.sel.OrderBy, sqlparser.NewOrder(expr, getRandomOrderDirection(qg.r)))
	}

	// randomly order on SelectExprs
	for _, selExpr := range qg.sel.SelectExprs {
		if aliasedExpr, ok := selExpr.(*sqlparser.AliasedExpr); ok && qg.r.Intn(2) < 1 {
			literal, ok := aliasedExpr.Expr.(*sqlparser.Literal)
			isIntLiteral := ok && literal.Type == sqlparser.IntVal
			if isIntLiteral {
				continue
			}
			qg.sel.OrderBy = append(qg.sel.OrderBy, sqlparser.NewOrder(aliasedExpr.Expr, getRandomOrderDirection(qg.r)))
		}
	}
}

// returns 0-2 random expressions based on tables
func (qg *queryGen) createWherePredicates(tables []tableT) {
	exprGenerators := slices2.Map(tables, func(t tableT) sqlparser.ExprGenerator { return &t })
	// TODO: when qg is added as an expression generator
	if qg.r.Intn(5) < 1 {
		exprGenerators = append(exprGenerators, qg)
	}
	predicates := qg.createRandomExprs(0, 2, exprGenerators...)
	qg.sel.AddWhere(sqlparser.AndExpressions(predicates...))
}

// creates predicates for the having clause comparing a column to a random expression
func (qg *queryGen) createHavingPredicates(grouping []column) {
	predicates := sqlparser.Exprs{}
	if qg.r.Intn(2) < 1 && testFailingQueries {
		// TODO: having can only contain aggregate or grouping columns in mysql, works fine in vitess
		// TODO: Can fix this by putting only the table with the grouping and aggregates column (newTable)
		predicates = append(predicates, qg.createRandomExprs(0, 2,
			slices2.Map(grouping, func(c column) sqlparser.ExprGenerator { return &c })...)...)
	}

	qg.genConfig = qg.genConfig.CanAggregateConfig()
	predicates = append(predicates, qg.createRandomExprs(0, 2,
		slices2.Map(grouping, func(c column) sqlparser.ExprGenerator { return &c })...)...)
	qg.genConfig = qg.genConfig.CannotAggregateConfig()

	qg.sel.AddHaving(sqlparser.AndExpressions(predicates...))
}

// returns between minExprs and maxExprs random expressions using generators
func (qg *queryGen) createRandomExprs(minExprs, maxExprs int, generators ...sqlparser.ExprGenerator) (predicates sqlparser.Exprs) {
	if minExprs > maxExprs {
		log.Fatalf("minExprs is greater than maxExprs; minExprs: %d, maxExprs: %d\n", minExprs, maxExprs)
	} else if maxExprs <= 0 {
		return
	}
	numPredicates := qg.r.Intn(maxExprs-minExprs+1) + minExprs
	for i := 0; i < numPredicates; i++ {
		predicates = append(predicates, qg.getRandomExpr(generators...))
	}

	return
}

// getRandomExpr returns a random expression
func (qg *queryGen) getRandomExpr(generators ...sqlparser.ExprGenerator) sqlparser.Expr {
	g := sqlparser.NewGenerator(qg.r, 2, generators...)
	return g.Expression(qg.genConfig)
}

// creates sel.Limit
func (qg *queryGen) createLimit() {
	limitNum := qg.r.Intn(10)
	if qg.r.Intn(2) < 1 {
		offset := qg.r.Intn(10)
		qg.sel.Limit = sqlparser.NewLimit(offset, limitNum)
	} else {
		qg.sel.Limit = sqlparser.NewLimitWithoutOffset(limitNum)
	}
}

func getRandomOrderDirection(r *rand.Rand) sqlparser.OrderDirection {
	// asc, desc
	return randomEl(r, []sqlparser.OrderDirection{0, 1})
}

func getRandomJoinType(r *rand.Rand) sqlparser.JoinType {
	// normal, straight, left, right, natural, natural left, natural right
	return randomEl(r, []sqlparser.JoinType{0, 1, 2, 3, 4, 5, 6})
}

func randomEl[K any](r *rand.Rand, in []K) K {
	return in[r.Intn(len(in))]
}

func newAliasedTable(tbl tableT, alias string) *sqlparser.AliasedTableExpr {
	return sqlparser.NewAliasedTableExpr(tbl.tableExpr, alias)
}

func newAliasedColumn(col column, alias string) *sqlparser.AliasedExpr {
	return sqlparser.NewAliasedExpr(col.getASTExpr(), alias)
}
